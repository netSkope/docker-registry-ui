<!--
Copyright (C) 2016-2023 Jones Magloire @Joxit

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<catalog-element>
  <!-- Begin of tag -->
  <div
    class="content"
    if="{!props.filterResults || state.nImages > 0 || matchSearch(props.filterResults, state.image)}"
  >
    <material-card
      class="list highlight"
      expanded="{state.expanded}"
      onclick="{ onClick }"
      if="{ !props.showCatalogNbTags || state.nbTags !== 0 }"
    >
      <a if="{ state.image }" href="{ router.taglist(state.image) }">
        <material-waves center="true" color="#ddd"></material-waves>
      </a>
      <material-waves if="{ state.images }" center="true" color="#ddd"></material-waves>
      <span>
        <i class="material-icons">send</i>
        { state.image || state.repo } <span if="{ checkImage(state.image) }" class="github-label label-red">Deprecated</span>
        <div if="{state.images}" class="item-count right">
          { state.nImages } images
          <i class="material-icons animated {state.expanded ? 'expanded' : ''}">expand_more</i>
        </div>
        <div if="{props.showCatalogNbTags && state.image}" class="item-count right">
          <span if="{state.efficiencyScore}" class="efficiency-score" > Efficiency: { state.efficiencyScore }</span>
          { state.nbTags } tags
          <i class="material-icons animated"></i>
        </div>
      </span>
    </material-card>
    <catalog-element
      if="{ state.images }"
      filter-results="{ props.filterResults }"
      registry-url="{ props.registryUrl }"
      on-notify="{ props.onnNotify }"
      on-authentication="{ props.onAuthentication }"
      show-catalog-nb-tags="{ props.showCatalogNbTags }"
      is-registry-secured="{ props.isRegistrySecured }"
      class="animated {!state.expanded && !props.filterResults ? 'hide' : ''} {state.expanding ? 'expanding' : ''}"
      each="{item in state.images}"
      z-index="{ props.zIndex - 1 }"
      item="{ item }"
    ></catalog-element>
  </div>
  <style>
  .efficiency-score {
    font-weight: lighter;
    font-style: italic;
    margin-right: 10px; /* Adjust the value as needed to move it to the left */
  }
  .github-label {
  display: inline-block;
  padding: 4px 8px;
  margin-left: 20px;
  font-size: 12px;
  font-weight: bold;
  border-radius: 4px;
  }
  .label-red {
  color: #fff;
  background-color: #d73a49; /* Red color used by GitHub */
  }
  .label-green {
  color: #fff;
  background-color: #28a745; /* Green color used by GitHub */
  }
  </style>
  <script>
    import router from '../../scripts/router';
    import { Http } from '../../scripts/http';
    import { matchSearch } from '../search-bar.riot';
    import { cache } from '../catalog/catalog.riot';
    import { repoName } from '../catalog/catalog.riot';
    import { fetchDiveReport } from '../utility/dive';
    
    export default {
      onBeforeMount(props, state) {
        state.efficiencyScore = "";
        if (props.item.images && props.item.images.length === 1) {
          state.image = props.item.images[0];
        } else if (typeof props.item === 'string') {
          state.image = props.item;
        } else if (props.item.images && props.item.repo) {
          state.images = props.item.images;
          state.repo = props.item.repo;
          state.nImages = props.item.images.length;
          state.expanded = props.catalogDefaultExpanded;
        }
        console.log("props:",props.showCatalogNbTags, state.image)
        if (props.showCatalogNbTags && state.image) {
          this.getNbTags(props, state);
        }
      },
      onMounted(props, state) {
        const materialCard = this.$('material-card');
        if (materialCard) {
          materialCard.style['z-index'] = props.zIndex;
        }
      },
      onBeforeUpdate(props, state) {
        if (props.filterResults && state.images) {
          state.nImages = state.images.filter((image) => matchSearch(props.filterResults, image)).length;
        } else {
          state.nImages = state.images && state.images.length;
        }
      },
      onClick() {
        console.log(Object.keys(cache).length === 0);
        const state = this.state;
        if (state.repo) {
          this.update({
            expanded: !this.state.expanded,
            expanding: true,
          });
          setTimeout(() => {
            this.update({
              expanding: false,
            });
          }, 50);
        }
      },
      checkImage(image) {
        let imageNameWithRepo = repoName+"/"+image ;
        if (image) {
          if (image.includes("-recent")){
            return true;
          }
        }
        for (var key in cache) {
          if (key.includes(imageNameWithRepo)) {
            return true;
          }
        }
        return false;
      },
      getNbTags(props, state) {
        console.log("getNbTags:",)
        const self = this;
        const oReq = new Http({
          onAuthentication: props.onAuthentication,
          withCredentials: props.isRegistrySecured,
        });
        oReq.addEventListener('loadend', function () {
          if (this.status === 200) {
            const tags_list = JSON.parse(this.responseText).tags;
            const nbTags = (tags_list || []).length;
            state.tags_list = tags_list;
            console.log("tags_list:",tags_list,nbTags);
            self.update({ nbTags, tags_list });
            self.getEfficiency(props, state); // Call getEfficiency after tags_list is populated
          } else if (this.status === 404) {
            props.onNotify('Server not found', true);
          } else {
            props.onNotify(this.responseText, true);
          }
        });
        oReq.addEventListener('error', function () {
          props.onNotify(this.getErrorMessage(), true);
        });
        oReq.open('GET', props.registryUrl + '/v2/' + state.image + '/tags/list');
        oReq.send();
      },
      getEfficiency(props, state) {
        console.log("tags_list: ", this.state.tags_list);
        if (!state.tags_list || state.tags_list.length === 0) {
          console.error("No tags available");
          return;
        }
        let tags_list = state.tags_list;
        let latestTag = tags_list[tags_list.length - 1]; // Assuming the latest tag is the last one in the list
        let family = state.image.split("/")[0];
        let image = state.image.split("/")[1];
        let tag = state.tags_list;

        fetchDiveReport(family, image, latestTag)
          .then(response => {
            return typeof response === 'string' ? JSON.parse(response) : response;
          })
          .then(reportData => {
            this.state.efficiencyScore =  parseFloat(reportData.image.efficiencyScore).toFixed(2) * 100;
            console.log("efficiencyScore: ", this.state.efficiencyScore, tags_list, latestTag, family, tag);
            this.update();
          })
          .catch(error => {
            console.error("Error fetching report data:", error);
          });
      },
      matchSearch,
      router,
    };
  </script>
  <!-- End of tag -->
</catalog-element>
